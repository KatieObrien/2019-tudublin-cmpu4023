module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCustomer {
  count: Int!
}

type AggregateCustomerHistory {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateProducts {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Customer {
  id: ID!
  firstName: String!
  lastName: String!
  address1: String!
  address2: String!
  city: String!
  zip: Int!
  country: String!
  email: String!
  phone: String!
  cardType: Int!
  card: String!
  cardExpiration: String!
  username: String!
  password: String!
  age: Int!
  income: Int!
  gender: Int!
}

type CustomerConnection {
  pageInfo: PageInfo!
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  firstName: String!
  lastName: String!
  address1: String!
  address2: String!
  city: String!
  zip: Int!
  country: String!
  email: String!
  phone: String!
  cardType: Int!
  card: String!
  cardExpiration: String!
  username: String!
  password: String!
  age: Int!
  income: Int!
  gender: Int!
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

type CustomerEdge {
  node: Customer!
  cursor: String!
}

type CustomerHistory {
  customer: Customer
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  products(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products!]
}

type CustomerHistoryConnection {
  pageInfo: PageInfo!
  edges: [CustomerHistoryEdge]!
  aggregate: AggregateCustomerHistory!
}

input CustomerHistoryCreateInput {
  customer: CustomerCreateOneInput
  orders: OrderCreateManyInput
  products: ProductsCreateManyInput
}

type CustomerHistoryEdge {
  node: CustomerHistory!
  cursor: String!
}

enum CustomerHistoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerHistorySubscriptionPayload {
  mutation: MutationType!
  node: CustomerHistory
  updatedFields: [String!]
}

input CustomerHistorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerHistoryWhereInput
  AND: [CustomerHistorySubscriptionWhereInput!]
  OR: [CustomerHistorySubscriptionWhereInput!]
  NOT: [CustomerHistorySubscriptionWhereInput!]
}

input CustomerHistoryWhereInput {
  customer: CustomerWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  products_every: ProductsWhereInput
  products_some: ProductsWhereInput
  products_none: ProductsWhereInput
  AND: [CustomerHistoryWhereInput!]
  OR: [CustomerHistoryWhereInput!]
  NOT: [CustomerHistoryWhereInput!]
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  zip_ASC
  zip_DESC
  country_ASC
  country_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  cardType_ASC
  cardType_DESC
  card_ASC
  card_DESC
  cardExpiration_ASC
  cardExpiration_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  income_ASC
  income_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  address1: String!
  address2: String!
  city: String!
  zip: Int!
  country: String!
  email: String!
  phone: String!
  cardType: Int!
  card: String!
  cardExpiration: String!
  username: String!
  password: String!
  age: Int!
  income: Int!
  gender: Int!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
  AND: [CustomerSubscriptionWhereInput!]
  OR: [CustomerSubscriptionWhereInput!]
  NOT: [CustomerSubscriptionWhereInput!]
}

input CustomerUpdateDataInput {
  firstName: String
  lastName: String
  address1: String
  address2: String
  city: String
  zip: Int
  country: String
  email: String
  phone: String
  cardType: Int
  card: String
  cardExpiration: String
  username: String
  password: String
  age: Int
  income: Int
  gender: Int
}

input CustomerUpdateInput {
  firstName: String
  lastName: String
  address1: String
  address2: String
  city: String
  zip: Int
  country: String
  email: String
  phone: String
  cardType: Int
  card: String
  cardExpiration: String
  username: String
  password: String
  age: Int
  income: Int
  gender: Int
}

input CustomerUpdateManyMutationInput {
  firstName: String
  lastName: String
  address1: String
  address2: String
  city: String
  zip: Int
  country: String
  email: String
  phone: String
  cardType: Int
  card: String
  cardExpiration: String
  username: String
  password: String
  age: Int
  income: Int
  gender: Int
}

input CustomerUpdateOneInput {
  create: CustomerCreateInput
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CustomerWhereUniqueInput
}

input CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput!
  create: CustomerCreateInput!
}

input CustomerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  address1: String
  address1_not: String
  address1_in: [String!]
  address1_not_in: [String!]
  address1_lt: String
  address1_lte: String
  address1_gt: String
  address1_gte: String
  address1_contains: String
  address1_not_contains: String
  address1_starts_with: String
  address1_not_starts_with: String
  address1_ends_with: String
  address1_not_ends_with: String
  address2: String
  address2_not: String
  address2_in: [String!]
  address2_not_in: [String!]
  address2_lt: String
  address2_lte: String
  address2_gt: String
  address2_gte: String
  address2_contains: String
  address2_not_contains: String
  address2_starts_with: String
  address2_not_starts_with: String
  address2_ends_with: String
  address2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  zip: Int
  zip_not: Int
  zip_in: [Int!]
  zip_not_in: [Int!]
  zip_lt: Int
  zip_lte: Int
  zip_gt: Int
  zip_gte: Int
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  cardType: Int
  cardType_not: Int
  cardType_in: [Int!]
  cardType_not_in: [Int!]
  cardType_lt: Int
  cardType_lte: Int
  cardType_gt: Int
  cardType_gte: Int
  card: String
  card_not: String
  card_in: [String!]
  card_not_in: [String!]
  card_lt: String
  card_lte: String
  card_gt: String
  card_gte: String
  card_contains: String
  card_not_contains: String
  card_starts_with: String
  card_not_starts_with: String
  card_ends_with: String
  card_not_ends_with: String
  cardExpiration: String
  cardExpiration_not: String
  cardExpiration_in: [String!]
  cardExpiration_not_in: [String!]
  cardExpiration_lt: String
  cardExpiration_lte: String
  cardExpiration_gt: String
  cardExpiration_gte: String
  cardExpiration_contains: String
  cardExpiration_not_contains: String
  cardExpiration_starts_with: String
  cardExpiration_not_starts_with: String
  cardExpiration_ends_with: String
  cardExpiration_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  income: Int
  income_not: Int
  income_in: [Int!]
  income_not_in: [Int!]
  income_lt: Int
  income_lte: Int
  income_gt: Int
  income_gte: Int
  gender: Int
  gender_not: Int
  gender_in: [Int!]
  gender_not_in: [Int!]
  gender_lt: Int
  gender_lte: Int
  gender_gt: Int
  gender_gte: Int
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
}

input CustomerWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  createCustomerHistory(data: CustomerHistoryCreateInput!): CustomerHistory!
  deleteManyCustomerHistories(where: CustomerHistoryWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createProducts(data: ProductsCreateInput!): Products!
  updateProducts(data: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products
  updateManyProductses(data: ProductsUpdateManyMutationInput!, where: ProductsWhereInput): BatchPayload!
  upsertProducts(where: ProductsWhereUniqueInput!, create: ProductsCreateInput!, update: ProductsUpdateInput!): Products!
  deleteProducts(where: ProductsWhereUniqueInput!): Products
  deleteManyProductses(where: ProductsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  orderId: ID!
  orderDate: String!
  netamount: Int!
  tax: Int!
  totalAmount: Int!
  customer: Customer
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  orderId: ID!
  orderDate: String!
  netamount: Int!
  tax: Int!
  totalAmount: Int!
  customer: CustomerCreateOneInput
}

input OrderCreateManyInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  orderId_ASC
  orderId_DESC
  orderDate_ASC
  orderDate_DESC
  netamount_ASC
  netamount_DESC
  tax_ASC
  tax_DESC
  totalAmount_ASC
  totalAmount_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  orderId: ID!
  orderDate: String!
  netamount: Int!
  tax: Int!
  totalAmount: Int!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  orderId: ID
  orderDate: String
  netamount: Int
  tax: Int
  totalAmount: Int
  customer: CustomerUpdateOneInput
}

input OrderUpdateManyMutationInput {
  orderId: ID
  orderDate: String
  netamount: Int
  tax: Int
  totalAmount: Int
}

input OrderWhereInput {
  orderId: ID
  orderId_not: ID
  orderId_in: [ID!]
  orderId_not_in: [ID!]
  orderId_lt: ID
  orderId_lte: ID
  orderId_gt: ID
  orderId_gte: ID
  orderId_contains: ID
  orderId_not_contains: ID
  orderId_starts_with: ID
  orderId_not_starts_with: ID
  orderId_ends_with: ID
  orderId_not_ends_with: ID
  orderDate: String
  orderDate_not: String
  orderDate_in: [String!]
  orderDate_not_in: [String!]
  orderDate_lt: String
  orderDate_lte: String
  orderDate_gt: String
  orderDate_gte: String
  orderDate_contains: String
  orderDate_not_contains: String
  orderDate_starts_with: String
  orderDate_not_starts_with: String
  orderDate_ends_with: String
  orderDate_not_ends_with: String
  netamount: Int
  netamount_not: Int
  netamount_in: [Int!]
  netamount_not_in: [Int!]
  netamount_lt: Int
  netamount_lte: Int
  netamount_gt: Int
  netamount_gte: Int
  tax: Int
  tax_not: Int
  tax_in: [Int!]
  tax_not_in: [Int!]
  tax_lt: Int
  tax_lte: Int
  tax_gt: Int
  tax_gte: Int
  totalAmount: Int
  totalAmount_not: Int
  totalAmount_in: [Int!]
  totalAmount_not_in: [Int!]
  totalAmount_lt: Int
  totalAmount_lte: Int
  totalAmount_gt: Int
  totalAmount_gte: Int
  customer: CustomerWhereInput
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  orderId: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Products {
  prodId: ID!
  title: String!
  category: Int!
  actor: String!
  price: Int!
  special: Int!
  commonProdId: Int!
}

type ProductsConnection {
  pageInfo: PageInfo!
  edges: [ProductsEdge]!
  aggregate: AggregateProducts!
}

input ProductsCreateInput {
  prodId: ID!
  title: String!
  category: Int!
  actor: String!
  price: Int!
  special: Int!
  commonProdId: Int!
}

input ProductsCreateManyInput {
  create: [ProductsCreateInput!]
  connect: [ProductsWhereUniqueInput!]
}

type ProductsEdge {
  node: Products!
  cursor: String!
}

enum ProductsOrderByInput {
  prodId_ASC
  prodId_DESC
  title_ASC
  title_DESC
  category_ASC
  category_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  special_ASC
  special_DESC
  commonProdId_ASC
  commonProdId_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductsPreviousValues {
  prodId: ID!
  title: String!
  category: Int!
  actor: String!
  price: Int!
  special: Int!
  commonProdId: Int!
}

type ProductsSubscriptionPayload {
  mutation: MutationType!
  node: Products
  updatedFields: [String!]
  previousValues: ProductsPreviousValues
}

input ProductsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductsWhereInput
  AND: [ProductsSubscriptionWhereInput!]
  OR: [ProductsSubscriptionWhereInput!]
  NOT: [ProductsSubscriptionWhereInput!]
}

input ProductsUpdateInput {
  prodId: ID
  title: String
  category: Int
  actor: String
  price: Int
  special: Int
  commonProdId: Int
}

input ProductsUpdateManyMutationInput {
  prodId: ID
  title: String
  category: Int
  actor: String
  price: Int
  special: Int
  commonProdId: Int
}

input ProductsWhereInput {
  prodId: ID
  prodId_not: ID
  prodId_in: [ID!]
  prodId_not_in: [ID!]
  prodId_lt: ID
  prodId_lte: ID
  prodId_gt: ID
  prodId_gte: ID
  prodId_contains: ID
  prodId_not_contains: ID
  prodId_starts_with: ID
  prodId_not_starts_with: ID
  prodId_ends_with: ID
  prodId_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  category: Int
  category_not: Int
  category_in: [Int!]
  category_not_in: [Int!]
  category_lt: Int
  category_lte: Int
  category_gt: Int
  category_gte: Int
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  special: Int
  special_not: Int
  special_in: [Int!]
  special_not_in: [Int!]
  special_lt: Int
  special_lte: Int
  special_gt: Int
  special_gte: Int
  commonProdId: Int
  commonProdId_not: Int
  commonProdId_in: [Int!]
  commonProdId_not_in: [Int!]
  commonProdId_lt: Int
  commonProdId_lte: Int
  commonProdId_gt: Int
  commonProdId_gte: Int
  AND: [ProductsWhereInput!]
  OR: [ProductsWhereInput!]
  NOT: [ProductsWhereInput!]
}

input ProductsWhereUniqueInput {
  prodId: ID
}

type Query {
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  customerHistories(where: CustomerHistoryWhereInput, orderBy: CustomerHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomerHistory]!
  customerHistoriesConnection(where: CustomerHistoryWhereInput, orderBy: CustomerHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerHistoryConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  products(where: ProductsWhereUniqueInput!): Products
  productses(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products]!
  productsesConnection(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductsConnection!
  node(id: ID!): Node
}

type Subscription {
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  customerHistory(where: CustomerHistorySubscriptionWhereInput): CustomerHistorySubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  products(where: ProductsSubscriptionWhereInput): ProductsSubscriptionPayload
}
`
      }
    