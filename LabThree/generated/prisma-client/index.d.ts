// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  customerHistory: (where?: CustomerHistoryWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  products: (where?: ProductsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  customer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  customers: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Customer>;
  customersConnection: (
    args?: {
      where?: CustomerWhereInput;
      orderBy?: CustomerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CustomerConnectionPromise;
  customerHistories: (
    args?: {
      where?: CustomerHistoryWhereInput;
      orderBy?: CustomerHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CustomerHistory>;
  customerHistoriesConnection: (
    args?: {
      where?: CustomerHistoryWhereInput;
      orderBy?: CustomerHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CustomerHistoryConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  products: (where: ProductsWhereUniqueInput) => ProductsPromise;
  productses: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Products>;
  productsesConnection: (
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (
    args: { data: CustomerUpdateInput; where: CustomerWhereUniqueInput }
  ) => CustomerPromise;
  updateManyCustomers: (
    args: { data: CustomerUpdateManyMutationInput; where?: CustomerWhereInput }
  ) => BatchPayloadPromise;
  upsertCustomer: (
    args: {
      where: CustomerWhereUniqueInput;
      create: CustomerCreateInput;
      update: CustomerUpdateInput;
    }
  ) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createCustomerHistory: (
    data: CustomerHistoryCreateInput
  ) => CustomerHistoryPromise;
  deleteManyCustomerHistories: (
    where?: CustomerHistoryWhereInput
  ) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProducts: (data: ProductsCreateInput) => ProductsPromise;
  updateProducts: (
    args: { data: ProductsUpdateInput; where: ProductsWhereUniqueInput }
  ) => ProductsPromise;
  updateManyProductses: (
    args: { data: ProductsUpdateManyMutationInput; where?: ProductsWhereInput }
  ) => BatchPayloadPromise;
  upsertProducts: (
    args: {
      where: ProductsWhereUniqueInput;
      create: ProductsCreateInput;
      update: ProductsUpdateInput;
    }
  ) => ProductsPromise;
  deleteProducts: (where: ProductsWhereUniqueInput) => ProductsPromise;
  deleteManyProductses: (where?: ProductsWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  customerHistory: (
    where?: CustomerHistorySubscriptionWhereInput
  ) => CustomerHistorySubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  products: (
    where?: ProductsSubscriptionWhereInput
  ) => ProductsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "address1_ASC"
  | "address1_DESC"
  | "address2_ASC"
  | "address2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "country_ASC"
  | "country_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "cardType_ASC"
  | "cardType_DESC"
  | "card_ASC"
  | "card_DESC"
  | "cardExpiration_ASC"
  | "cardExpiration_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "income_ASC"
  | "income_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CustomerHistoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductsOrderByInput =
  | "prodId_ASC"
  | "prodId_DESC"
  | "title_ASC"
  | "title_DESC"
  | "category_ASC"
  | "category_DESC"
  | "actor_ASC"
  | "actor_DESC"
  | "price_ASC"
  | "price_DESC"
  | "special_ASC"
  | "special_DESC"
  | "commonProdId_ASC"
  | "commonProdId_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "orderId_ASC"
  | "orderId_DESC"
  | "orderDate_ASC"
  | "orderDate_DESC"
  | "netamount_ASC"
  | "netamount_DESC"
  | "tax_ASC"
  | "tax_DESC"
  | "totalAmount_ASC"
  | "totalAmount_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CustomerCreateInput {
  firstName: String;
  lastName: String;
  address1: String;
  address2: String;
  city: String;
  zip: Int;
  country: String;
  email: String;
  phone: String;
  cardType: Int;
  card: String;
  cardExpiration: String;
  username: String;
  password: String;
  age: Int;
  income: Int;
  gender: Int;
}

export interface CustomerUpdateOneInput {
  create?: CustomerCreateInput;
  update?: CustomerUpdateDataInput;
  upsert?: CustomerUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CustomerWhereUniqueInput;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderUpdateInput {
  orderId?: ID_Input;
  orderDate?: String;
  netamount?: Int;
  tax?: Int;
  totalAmount?: Int;
  customer?: CustomerUpdateOneInput;
}

export interface CustomerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  address1?: String;
  address1_not?: String;
  address1_in?: String[] | String;
  address1_not_in?: String[] | String;
  address1_lt?: String;
  address1_lte?: String;
  address1_gt?: String;
  address1_gte?: String;
  address1_contains?: String;
  address1_not_contains?: String;
  address1_starts_with?: String;
  address1_not_starts_with?: String;
  address1_ends_with?: String;
  address1_not_ends_with?: String;
  address2?: String;
  address2_not?: String;
  address2_in?: String[] | String;
  address2_not_in?: String[] | String;
  address2_lt?: String;
  address2_lte?: String;
  address2_gt?: String;
  address2_gte?: String;
  address2_contains?: String;
  address2_not_contains?: String;
  address2_starts_with?: String;
  address2_not_starts_with?: String;
  address2_ends_with?: String;
  address2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  zip?: Int;
  zip_not?: Int;
  zip_in?: Int[] | Int;
  zip_not_in?: Int[] | Int;
  zip_lt?: Int;
  zip_lte?: Int;
  zip_gt?: Int;
  zip_gte?: Int;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  cardType?: Int;
  cardType_not?: Int;
  cardType_in?: Int[] | Int;
  cardType_not_in?: Int[] | Int;
  cardType_lt?: Int;
  cardType_lte?: Int;
  cardType_gt?: Int;
  cardType_gte?: Int;
  card?: String;
  card_not?: String;
  card_in?: String[] | String;
  card_not_in?: String[] | String;
  card_lt?: String;
  card_lte?: String;
  card_gt?: String;
  card_gte?: String;
  card_contains?: String;
  card_not_contains?: String;
  card_starts_with?: String;
  card_not_starts_with?: String;
  card_ends_with?: String;
  card_not_ends_with?: String;
  cardExpiration?: String;
  cardExpiration_not?: String;
  cardExpiration_in?: String[] | String;
  cardExpiration_not_in?: String[] | String;
  cardExpiration_lt?: String;
  cardExpiration_lte?: String;
  cardExpiration_gt?: String;
  cardExpiration_gte?: String;
  cardExpiration_contains?: String;
  cardExpiration_not_contains?: String;
  cardExpiration_starts_with?: String;
  cardExpiration_not_starts_with?: String;
  cardExpiration_ends_with?: String;
  cardExpiration_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  income?: Int;
  income_not?: Int;
  income_in?: Int[] | Int;
  income_not_in?: Int[] | Int;
  income_lt?: Int;
  income_lte?: Int;
  income_gt?: Int;
  income_gte?: Int;
  gender?: Int;
  gender_not?: Int;
  gender_in?: Int[] | Int;
  gender_not_in?: Int[] | Int;
  gender_lt?: Int;
  gender_lte?: Int;
  gender_gt?: Int;
  gender_gte?: Int;
  AND?: CustomerWhereInput[] | CustomerWhereInput;
  OR?: CustomerWhereInput[] | CustomerWhereInput;
  NOT?: CustomerWhereInput[] | CustomerWhereInput;
}

export interface ProductsCreateInput {
  prodId: ID_Input;
  title: String;
  category: Int;
  actor: String;
  price: Int;
  special: Int;
  commonProdId: Int;
}

export interface ProductsUpdateManyMutationInput {
  prodId?: ID_Input;
  title?: String;
  category?: Int;
  actor?: String;
  price?: Int;
  special?: Int;
  commonProdId?: Int;
}

export interface ProductsCreateManyInput {
  create?: ProductsCreateInput[] | ProductsCreateInput;
  connect?: ProductsWhereUniqueInput[] | ProductsWhereUniqueInput;
}

export interface OrderUpdateManyMutationInput {
  orderId?: ID_Input;
  orderDate?: String;
  netamount?: Int;
  tax?: Int;
  totalAmount?: Int;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  orderId: ID_Input;
}>;

export interface OrderWhereInput {
  orderId?: ID_Input;
  orderId_not?: ID_Input;
  orderId_in?: ID_Input[] | ID_Input;
  orderId_not_in?: ID_Input[] | ID_Input;
  orderId_lt?: ID_Input;
  orderId_lte?: ID_Input;
  orderId_gt?: ID_Input;
  orderId_gte?: ID_Input;
  orderId_contains?: ID_Input;
  orderId_not_contains?: ID_Input;
  orderId_starts_with?: ID_Input;
  orderId_not_starts_with?: ID_Input;
  orderId_ends_with?: ID_Input;
  orderId_not_ends_with?: ID_Input;
  orderDate?: String;
  orderDate_not?: String;
  orderDate_in?: String[] | String;
  orderDate_not_in?: String[] | String;
  orderDate_lt?: String;
  orderDate_lte?: String;
  orderDate_gt?: String;
  orderDate_gte?: String;
  orderDate_contains?: String;
  orderDate_not_contains?: String;
  orderDate_starts_with?: String;
  orderDate_not_starts_with?: String;
  orderDate_ends_with?: String;
  orderDate_not_ends_with?: String;
  netamount?: Int;
  netamount_not?: Int;
  netamount_in?: Int[] | Int;
  netamount_not_in?: Int[] | Int;
  netamount_lt?: Int;
  netamount_lte?: Int;
  netamount_gt?: Int;
  netamount_gte?: Int;
  tax?: Int;
  tax_not?: Int;
  tax_in?: Int[] | Int;
  tax_not_in?: Int[] | Int;
  tax_lt?: Int;
  tax_lte?: Int;
  tax_gt?: Int;
  tax_gte?: Int;
  totalAmount?: Int;
  totalAmount_not?: Int;
  totalAmount_in?: Int[] | Int;
  totalAmount_not_in?: Int[] | Int;
  totalAmount_lt?: Int;
  totalAmount_lte?: Int;
  totalAmount_gt?: Int;
  totalAmount_gte?: Int;
  customer?: CustomerWhereInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface OrderCreateInput {
  orderId: ID_Input;
  orderDate: String;
  netamount: Int;
  tax: Int;
  totalAmount: Int;
  customer?: CustomerCreateOneInput;
}

export interface CustomerHistorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CustomerHistoryWhereInput;
  AND?:
    | CustomerHistorySubscriptionWhereInput[]
    | CustomerHistorySubscriptionWhereInput;
  OR?:
    | CustomerHistorySubscriptionWhereInput[]
    | CustomerHistorySubscriptionWhereInput;
  NOT?:
    | CustomerHistorySubscriptionWhereInput[]
    | CustomerHistorySubscriptionWhereInput;
}

export interface OrderCreateManyInput {
  create?: OrderCreateInput[] | OrderCreateInput;
  connect?: OrderWhereUniqueInput[] | OrderWhereUniqueInput;
}

export interface ProductsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductsWhereInput;
  AND?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  OR?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
  NOT?: ProductsSubscriptionWhereInput[] | ProductsSubscriptionWhereInput;
}

export interface CustomerCreateOneInput {
  create?: CustomerCreateInput;
  connect?: CustomerWhereUniqueInput;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OrderWhereInput;
  AND?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  OR?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
  NOT?: OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput;
}

export type ProductsWhereUniqueInput = AtLeastOne<{
  prodId: ID_Input;
}>;

export interface ProductsUpdateInput {
  prodId?: ID_Input;
  title?: String;
  category?: Int;
  actor?: String;
  price?: Int;
  special?: Int;
  commonProdId?: Int;
}

export interface ProductsWhereInput {
  prodId?: ID_Input;
  prodId_not?: ID_Input;
  prodId_in?: ID_Input[] | ID_Input;
  prodId_not_in?: ID_Input[] | ID_Input;
  prodId_lt?: ID_Input;
  prodId_lte?: ID_Input;
  prodId_gt?: ID_Input;
  prodId_gte?: ID_Input;
  prodId_contains?: ID_Input;
  prodId_not_contains?: ID_Input;
  prodId_starts_with?: ID_Input;
  prodId_not_starts_with?: ID_Input;
  prodId_ends_with?: ID_Input;
  prodId_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  category?: Int;
  category_not?: Int;
  category_in?: Int[] | Int;
  category_not_in?: Int[] | Int;
  category_lt?: Int;
  category_lte?: Int;
  category_gt?: Int;
  category_gte?: Int;
  actor?: String;
  actor_not?: String;
  actor_in?: String[] | String;
  actor_not_in?: String[] | String;
  actor_lt?: String;
  actor_lte?: String;
  actor_gt?: String;
  actor_gte?: String;
  actor_contains?: String;
  actor_not_contains?: String;
  actor_starts_with?: String;
  actor_not_starts_with?: String;
  actor_ends_with?: String;
  actor_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  special?: Int;
  special_not?: Int;
  special_in?: Int[] | Int;
  special_not_in?: Int[] | Int;
  special_lt?: Int;
  special_lte?: Int;
  special_gt?: Int;
  special_gte?: Int;
  commonProdId?: Int;
  commonProdId_not?: Int;
  commonProdId_in?: Int[] | Int;
  commonProdId_not_in?: Int[] | Int;
  commonProdId_lt?: Int;
  commonProdId_lte?: Int;
  commonProdId_gt?: Int;
  commonProdId_gte?: Int;
  AND?: ProductsWhereInput[] | ProductsWhereInput;
  OR?: ProductsWhereInput[] | ProductsWhereInput;
  NOT?: ProductsWhereInput[] | ProductsWhereInput;
}

export interface CustomerUpdateInput {
  firstName?: String;
  lastName?: String;
  address1?: String;
  address2?: String;
  city?: String;
  zip?: Int;
  country?: String;
  email?: String;
  phone?: String;
  cardType?: Int;
  card?: String;
  cardExpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Int;
  gender?: Int;
}

export interface CustomerUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  address1?: String;
  address2?: String;
  city?: String;
  zip?: Int;
  country?: String;
  email?: String;
  phone?: String;
  cardType?: Int;
  card?: String;
  cardExpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Int;
  gender?: Int;
}

export interface CustomerHistoryCreateInput {
  customer?: CustomerCreateOneInput;
  orders?: OrderCreateManyInput;
  products?: ProductsCreateManyInput;
}

export interface CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput;
  create: CustomerCreateInput;
}

export interface CustomerHistoryWhereInput {
  customer?: CustomerWhereInput;
  orders_every?: OrderWhereInput;
  orders_some?: OrderWhereInput;
  orders_none?: OrderWhereInput;
  products_every?: ProductsWhereInput;
  products_some?: ProductsWhereInput;
  products_none?: ProductsWhereInput;
  AND?: CustomerHistoryWhereInput[] | CustomerHistoryWhereInput;
  OR?: CustomerHistoryWhereInput[] | CustomerHistoryWhereInput;
  NOT?: CustomerHistoryWhereInput[] | CustomerHistoryWhereInput;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CustomerWhereInput;
  AND?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  OR?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
  NOT?: CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput;
}

export interface CustomerUpdateDataInput {
  firstName?: String;
  lastName?: String;
  address1?: String;
  address2?: String;
  city?: String;
  zip?: Int;
  country?: String;
  email?: String;
  phone?: String;
  cardType?: Int;
  card?: String;
  cardExpiration?: String;
  username?: String;
  password?: String;
  age?: Int;
  income?: Int;
  gender?: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateProducts {
  count: Int;
}

export interface AggregateProductsPromise
  extends Promise<AggregateProducts>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductsSubscription
  extends Promise<AsyncIterator<AggregateProducts>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductsPreviousValues {
  prodId: ID_Output;
  title: String;
  category: Int;
  actor: String;
  price: Int;
  special: Int;
  commonProdId: Int;
}

export interface ProductsPreviousValuesPromise
  extends Promise<ProductsPreviousValues>,
    Fragmentable {
  prodId: () => Promise<ID_Output>;
  title: () => Promise<String>;
  category: () => Promise<Int>;
  actor: () => Promise<String>;
  price: () => Promise<Int>;
  special: () => Promise<Int>;
  commonProdId: () => Promise<Int>;
}

export interface ProductsPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductsPreviousValues>>,
    Fragmentable {
  prodId: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Int>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  special: () => Promise<AsyncIterator<Int>>;
  commonProdId: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ProductsSubscriptionPayload {
  mutation: MutationType;
  node: Products;
  updatedFields: String[];
  previousValues: ProductsPreviousValues;
}

export interface ProductsSubscriptionPayloadPromise
  extends Promise<ProductsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductsPreviousValuesPromise>() => T;
}

export interface ProductsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductsPreviousValuesSubscription>() => T;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductsConnection {
  pageInfo: PageInfo;
  edges: ProductsEdge[];
}

export interface ProductsConnectionPromise
  extends Promise<ProductsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductsEdge>>() => T;
  aggregate: <T = AggregateProductsPromise>() => T;
}

export interface ProductsConnectionSubscription
  extends Promise<AsyncIterator<ProductsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductsSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface CustomerHistoryEdge {
  node: CustomerHistory;
  cursor: String;
}

export interface CustomerHistoryEdgePromise
  extends Promise<CustomerHistoryEdge>,
    Fragmentable {
  node: <T = CustomerHistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerHistoryEdgeSubscription
  extends Promise<AsyncIterator<CustomerHistoryEdge>>,
    Fragmentable {
  node: <T = CustomerHistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface Products {
  prodId: ID_Output;
  title: String;
  category: Int;
  actor: String;
  price: Int;
  special: Int;
  commonProdId: Int;
}

export interface ProductsPromise extends Promise<Products>, Fragmentable {
  prodId: () => Promise<ID_Output>;
  title: () => Promise<String>;
  category: () => Promise<Int>;
  actor: () => Promise<String>;
  price: () => Promise<Int>;
  special: () => Promise<Int>;
  commonProdId: () => Promise<Int>;
}

export interface ProductsSubscription
  extends Promise<AsyncIterator<Products>>,
    Fragmentable {
  prodId: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<Int>>;
  actor: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  special: () => Promise<AsyncIterator<Int>>;
  commonProdId: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerHistory {}

export interface CustomerHistoryPromise
  extends Promise<CustomerHistory>,
    Fragmentable {
  customer: <T = CustomerPromise>() => T;
  orders: <T = FragmentableArray<Order>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = FragmentableArray<Products>>(
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CustomerHistorySubscription
  extends Promise<AsyncIterator<CustomerHistory>>,
    Fragmentable {
  customer: <T = CustomerSubscription>() => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = Promise<AsyncIterator<ProductsSubscription>>>(
    args?: {
      where?: ProductsWhereInput;
      orderBy?: ProductsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface OrderPreviousValues {
  orderId: ID_Output;
  orderDate: String;
  netamount: Int;
  tax: Int;
  totalAmount: Int;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  orderId: () => Promise<ID_Output>;
  orderDate: () => Promise<String>;
  netamount: () => Promise<Int>;
  tax: () => Promise<Int>;
  totalAmount: () => Promise<Int>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  orderId: () => Promise<AsyncIterator<ID_Output>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  netamount: () => Promise<AsyncIterator<Int>>;
  tax: () => Promise<AsyncIterator<Int>>;
  totalAmount: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerHistorySubscriptionPayload {
  mutation: MutationType;
  node: CustomerHistory;
  updatedFields: String[];
}

export interface CustomerHistorySubscriptionPayloadPromise
  extends Promise<CustomerHistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerHistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
}

export interface CustomerHistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerHistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerHistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
}

export interface Customer {
  id: ID_Output;
  firstName: String;
  lastName: String;
  address1: String;
  address2: String;
  city: String;
  zip: Int;
  country: String;
  email: String;
  phone: String;
  cardType: Int;
  card: String;
  cardExpiration: String;
  username: String;
  password: String;
  age: Int;
  income: Int;
  gender: Int;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  country: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  cardType: () => Promise<Int>;
  card: () => Promise<String>;
  cardExpiration: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  income: () => Promise<Int>;
  gender: () => Promise<Int>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  cardType: () => Promise<AsyncIterator<Int>>;
  card: () => Promise<AsyncIterator<String>>;
  cardExpiration: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  address1: String;
  address2: String;
  city: String;
  zip: Int;
  country: String;
  email: String;
  phone: String;
  cardType: Int;
  card: String;
  cardExpiration: String;
  username: String;
  password: String;
  age: Int;
  income: Int;
  gender: Int;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  country: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  cardType: () => Promise<Int>;
  card: () => Promise<String>;
  cardExpiration: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  income: () => Promise<Int>;
  gender: () => Promise<Int>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  cardType: () => Promise<AsyncIterator<Int>>;
  card: () => Promise<AsyncIterator<String>>;
  cardExpiration: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Int>>;
}

export interface ProductsEdge {
  node: Products;
  cursor: String;
}

export interface ProductsEdgePromise
  extends Promise<ProductsEdge>,
    Fragmentable {
  node: <T = ProductsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductsEdgeSubscription
  extends Promise<AsyncIterator<ProductsEdge>>,
    Fragmentable {
  node: <T = ProductsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Order {
  orderId: ID_Output;
  orderDate: String;
  netamount: Int;
  tax: Int;
  totalAmount: Int;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  orderId: () => Promise<ID_Output>;
  orderDate: () => Promise<String>;
  netamount: () => Promise<Int>;
  tax: () => Promise<Int>;
  totalAmount: () => Promise<Int>;
  customer: <T = CustomerPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  orderId: () => Promise<AsyncIterator<ID_Output>>;
  orderDate: () => Promise<AsyncIterator<String>>;
  netamount: () => Promise<AsyncIterator<Int>>;
  tax: () => Promise<AsyncIterator<Int>>;
  totalAmount: () => Promise<AsyncIterator<Int>>;
  customer: <T = CustomerSubscription>() => T;
}

export interface CustomerHistoryConnection {}

export interface CustomerHistoryConnectionPromise
  extends Promise<CustomerHistoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerHistoryEdge>>() => T;
  aggregate: <T = AggregateCustomerHistoryPromise>() => T;
}

export interface CustomerHistoryConnectionSubscription
  extends Promise<AsyncIterator<CustomerHistoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerHistoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerHistorySubscription>() => T;
}

export interface AggregateCustomerHistory {
  count: Int;
}

export interface AggregateCustomerHistoryPromise
  extends Promise<AggregateCustomerHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerHistorySubscription
  extends Promise<AsyncIterator<AggregateCustomerHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "CustomerHistory",
    embedded: false
  },
  {
    name: "Products",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
